#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Start PostgreSQL service if enabled
# ==============================================================================
declare postgres_data
declare update
declare postgres_pid
declare version_file

postgres_data=/data/postgres
version_file=/data/version
update=false

# Check if we need to update
if [[ $(< ${version_file}) != $(bashio::addon.version) ]]; then
	update=true
fi

# Start Postgres
bashio::log.info "Starting PostgreSQL.."
su - postgres -c "postgres -D ${postgres_data}" &
postgres_pid=$!
bashio::log.info "Started PostgreSQL.."

# Wait for postgres to become available..
until psql -U "postgres" postgres -c "" 2> /dev/null; do sleep 1; done

# Setup postgres user on first run
if [[ -f "/data/firstrun" ]]; then
	bashio::log.info "Setting up postgres user.."
	psql -U "postgres" postgres -c "ALTER USER postgres WITH PASSWORD 'homeassistant';"
fi

# Create database if not exist
create_database() {
  local db_name="$1"
  bashio::log.info "Create database if not exist: '$db_name'"
  psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '$db_name'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE $db_name"
}

create_database "dendrite"
create_database "bridge_discord"
create_database "bridge_gmessages"
#create_database "bridge_imessage"
create_database "bridge_signalgo"
create_database "bridge_slack"
create_database "bridge_telegram"
create_database "bridge_whatsapp"

# Exit update mode
rm -f /data/firstrun
if bashio::var.true "${update}"; then
	bashio::log.info "Exiting update mode and restarting.."
	# Write new addon-version
	bashio::addon.version > ${version_file}
	sleep 3
	bashio::addon.restart
fi

# And let it roll
bashio::log.notice "Postgres is running!"
wait "${postgres_pid}"
